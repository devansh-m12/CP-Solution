/*
     ॐ त्र्यम्बकं यजामहे सुगन्धिं पुष्टिवर्धनम् |
     उर्वारुकमिव बन्धनान्मृत्योर्मुक्षीय माऽमृतात् ||
*/

/* 
     I can't wait to live in glory and eternal lastin' life
     Won't you take the wheel? I'll recline and I'll sit still.
*/


#include <bits/stdc++.h>

using namespace std;

#define int            long long int
#define F              first
#define S              second
#define pb             push_back
#define si             set <int>
#define vi             vector <int>
#define pii            pair <int, int>
#define vpi            vector <pii>
#define vpp            vector <pair<int, pii>>
#define mii            map <int, int>
#define mpi            map <pii, int>
#define spi            set <pii>
#define endl           "\n"
#define sz(x)          ((int) x.size())
#define all(p)         p.begin(), p.end()
#define double         long double
#define que_max        priority_queue <int>
#define que_min        priority_queue <int, vi, greater<int>>
#define bug(...)       __f (#__VA_ARGS__, __VA_ARGS__)
#define print(a)       for(auto x : a) cout << x << " "; cout << endl
#define print1(a)      for(auto x : a) cout << x.F << " " << x.S << endl
#define print2(a,x,y)  for(int i = x; i < y; i++) cout<< a[i]<< " "; cout << endl

inline int power(int a, int b)
{
	int x = 1;
	while (b)
	{
		if (b & 1) x *= a;
		a *= a;
		b >>= 1;
	}
	return x;
}

template <typename Arg1>
void __f (const char* name, Arg1&& arg1) { cout << name << " : " << arg1 << endl; }
template <typename Arg1, typename... Args>
void __f (const char* names, Arg1&& arg1, Args&&... args)
{
	const char* comma = strchr (names + 1, ',');
	cout.write (names, comma - names) << " : " << arg1 << " | "; __f (comma + 1, args...);
}


	void build(int ind, int low, int high, int* arr,int*seg,int orr) {
		if (low == high) {
			seg[ind] = arr[low];
			return;
		}

		int mid = (low + high) / 2;
		build(2 * ind + 1, low, mid, arr,seg,!orr);
		build(2 * ind + 2, mid + 1, high, arr,seg,!orr);
		if(orr) seg[ind] = seg[2 * ind + 1] | seg[2 * ind + 2];
		else seg[ind] = seg[2 * ind + 1] ^ seg[2 * ind + 2];
	}

	void update(int ind, int low, int high, int i, int val,int*seg,int orr) {
		if (low == high) {
			seg[ind] = val;
			return;
		}

		int mid = (low + high) / 2;
		if (i <= mid) update(2 * ind + 1, low, mid, i, val,seg,!orr);
		else update(2 * ind + 2, mid + 1, high, i, val,seg,!orr);
		if(orr) seg[ind] = seg[2 * ind + 1] | seg[2 * ind + 2];
		else seg[ind] = seg[2 * ind + 1] ^ seg[2 * ind + 2];
	}

void solve() {
	int n,q;
	cin>>n>>q;
	int N = pow(2,n);
	int arr[N];
	int seg[4*N];
	for(int i = 0;i<N;i++) cin>>arr[i];

	if(n%2==0) build(0,0,N-1,arr,seg,0);
	else build(0,0,N-1,arr,seg,1);

	while(q--){
		int i,val;
		cin>>i>>val;
		i--;
		if(n%2==0) update(0,0,N-1,i,val,seg,0);
		else update(0,0,N-1,i,val,seg,1);
		cout<<seg[0]<<endl;
	}
}

int32_t main()
{
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

#ifndef ONLINE_JUDGE
	freopen("input.txt",  "r",  stdin);
	freopen("output.txt", "w", stdout);
#endif

	clock_t z = clock();

	int t = 1;
	// cin >> t;
	while (t--) solve();

	cerr << "Run Time : " << ((double)(clock() - z) / CLOCKS_PER_SEC);

	return 0;
}
